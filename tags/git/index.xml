<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Blog</title><link>https://fukugit.github.io/blog/tags/git/</link><description>Recent content in git on Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Mon, 22 Jun 2020 13:21:50 +0900</lastBuildDate><atom:link href="https://fukugit.github.io/blog/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitまとめ</title><link>https://fukugit.github.io/blog/posts/git/2020-06-26-%E3%81%BE%E3%81%A8%E3%82%81/</link><pubDate>Mon, 22 Jun 2020 13:21:50 +0900</pubDate><guid>https://fukugit.github.io/blog/posts/git/2020-06-26-%E3%81%BE%E3%81%A8%E3%82%81/</guid><description>
&lt;p>Gitまとめアレコレ&lt;/p>
&lt;h2 id="ログの見方">ログの見方&lt;/h2>
&lt;p>Git logについてまずは公式サイトを読んでみよう。公式サイトの説明は&lt;a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%B1%A5%E6%AD%B4%E3%81%AE%E9%96%B2%E8%A6%A7">コチラ&lt;/a>から。&lt;/p>
&lt;h3 id="log-を1行で見る">log を1行で見る。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log --oneline
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="log-の整形">log の整形&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log --pretty&lt;span style="color:#f92672">=&lt;/span>format:&lt;span style="color:#e6db74">&amp;#34;%h %cd %cn &amp;#39;%s&amp;#39;&amp;#34;&lt;/span>
&lt;span style="color:#75715e">## フォーマット： コミットID 日付 名前 コメント&lt;/span>
&lt;span style="color:#75715e">## 例：252692d Fri Apr 5 08:11:59 2019 +0900 fukugit &amp;#39;バリデータを追加しました。&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>その他のフォーマット項目については&lt;a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%B1%A5%E6%AD%B4%E3%81%AE%E9%96%B2%E8%A6%A7">こちら&lt;/a>にまとめてあります。&lt;br>
「git log &amp;ndash;pretty=format 用の便利なオプション」で検索したら一覧が出てきます。&lt;/p>
&lt;h3 id="log-と一緒に修正箇所を全て表示する">log と一緒に修正箇所を全て表示する&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log -p
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修正されたファイル名のみを表示する上記の簡易版">修正されたファイル名のみを表示する(上記の簡易版)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log -stat
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="特定の文字で検索する">特定の文字で検索する。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log --grep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xxxx&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="コミットユーザで検索する">コミットユーザで検索する。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log --auther&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xxxx&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="期間で検索する">期間で検索する。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git log --after&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;2020/04/01&amp;#39;&lt;/span>
git log --before&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;2020/04/01&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="stash">Stash&lt;/h2>
&lt;h3 id="stashする">stashする。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git add .
git status
git stash save &lt;span style="color:#e6db74">&amp;#34;一旦退避&amp;#34;&lt;/span>
git status
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stash一覧を見る">stash一覧を見る&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git stash list
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stashの中身を見る">stashの中身を見る&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git stash list
git stash show &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">## {0}はgit stash listで一覧化できます。&lt;/span>
git stash show &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span> -P &lt;span style="color:#75715e">## -P オプションで内容も見れます。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stashを消す">stashを消す&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git stash clear &lt;span style="color:#75715e">## 全消し&lt;/span>
git stash drop &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">## 一部消し&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stashを適用する">stashを適用する。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git stash apply &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span>
git stash list &lt;span style="color:#75715e">## 適用してもstashは消えていません。&lt;/span>
git stash drop &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stash-を適用して同時に消します">stash を適用して同時に消します。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git stash pop &lt;span style="color:#f92672">{&lt;/span>0&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="pull">pull&lt;/h2>
&lt;h3 id="マージコミットを作らずにpullする方法rebaseのようなイメージ">マージコミットを作らずにPullする方法（rebaseのようなイメージ）&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git pull -–rebase origin branchname
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://kray.jp/blog/git-pull-rebase/">このサイト&lt;/a>にgit pull と git pull &amp;ndash;rebase の違いが書かれています。&lt;/p>
&lt;hr>
&lt;h2 id="merge">merge&lt;/h2>
&lt;h3 id="コミット有りマージ">コミット有りマージ&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git merge develop &lt;span style="color:#75715e">## マージしたらマージ分のコミットIDが付きます。これは他のコミットIDが変更されないことを意味します。一方でrebaseはコミットIDが変わってしまいます。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="rebase">Rebase&lt;/h2>
&lt;h3 id="2つのブランチをマージします">2つのブランチをマージします。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git rebase develop
git status &lt;span style="color:#75715e">## viで競合しているファイルを開いて、競合を解消します。&lt;/span>
git add . &lt;span style="color:#75715e">## このタイミングだとまだどのブランチも選択した状態になっていないけど問題無しです。&lt;/span>
git rebase --continue &lt;span style="color:#75715e">## このタイミングでブランチが選択された状態になります。&lt;/span>
&lt;span style="color:#75715e">## 注意！！！ rebaseをすることでコミットIDが変わってしまいます。すでにpush済みの場合はpush -f をしないといけなくなる可能性があるので気をつけて！&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rebase-の取り消し">rebase の取り消し&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git rebase --abort
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="複数commitの集約">複数commitの集約&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git rebase -i HEAD~2 &lt;span style="color:#75715e">## 過去2つのコミットが対象です。&lt;/span>
&lt;span style="color:#75715e">## viが開きます。&lt;/span>
pick 4eb0c37 コミットその１
pick 8c5ca88 コミットその２
&lt;span style="color:#75715e">## viで消してしまいたいコミット（集約したいコミット）にs を付けて保存します。&lt;/span>
pick 4eb0c37 コミットその１
s 8c5ca88 コミットその２
&lt;span style="color:#75715e">## さらに別のvi が開くのでコミットコメントを整備します。ファイルを保存します。&lt;/span>
コミットその１
コミットその２ &lt;span style="color:#75715e">## このコメントが不要なら消します。&lt;/span>
&lt;span style="color:#75715e">## これで終わりです。この方法もコミットIDが変わってしまうので気をつけて下さい。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="差分チェック">■差分チェック&lt;/h2>
&lt;h3 id="ステージングに乗せる前にカレントブランチとの差分を確認する">ステージングに乗せる前にカレントブランチとの差分を確認する&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git diff --name-only
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ステージングに乗せた後にカレントブランチとの差分を確認する">ステージングに乗せた後にカレントブランチとの差分を確認する&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git diff --cached --name-only
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ブランチ間の差分を確認する両方コミットする必要あり">ブランチ間の差分を確認する(両方コミットする必要あり)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git diff master develop
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="リモートブランチとの差分を確認する両方コミットする必要あり">リモートブランチとの差分を確認する(両方コミットする必要あり)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git diff origin/dvelop develop
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="取り消し系">取り消し系&lt;/h2>
&lt;h3 id="git-add-する前のファイルディレクトリを元に戻す追加したファイルは消せない">git add する前のファイル・ディレクトリを元に戻す。（追加したファイルは消せない）&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1： &lt;span style="color:#75715e">## 適当なファイルを修正(addしない。)&lt;/span>
2: git diff --name-only
3: git checkout .
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="追加したファイルを消すのはこちら">追加したファイルを消すのはこちら。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1： &lt;span style="color:#75715e">## 適当なファイルを追加(addしない。)&lt;/span>
2: git clean -df
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="特定ファイルを１つ前に戻す">特定ファイルを１つ前に戻す&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: &lt;span style="color:#75715e">## 適当なファイルを修正（コミットされているやつ）&lt;/span>
2: git checkout HEAD Test.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="git-add--もしくは-commit-したあとに取り消す方法">git add . もしくは commit したあとに取り消す方法&lt;/h3>
&lt;p>resetは取り消しがコミットログに残らない。よってpushした後にやるとヤバい。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: git add .
2: git diff --cached --name-only
3: git reset --hard HEAD &lt;span style="color:#75715e">## addしたものが全て削除される。 git checkout . と同じ&lt;/span>
4: git reset --hard HEAD^ &lt;span style="color:#75715e">## 1つ前のコミットに戻る。今のコミットは削除される。)&lt;/span>
5: git reset --hard vsd122414dsfsfe &lt;span style="color:#75715e">## コミットIDを指定して、コミットIDのところまで戻る。コミットIDを削除するのではないので気を付けること&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="resetを取り消したいresetしたけど元の状態に戻したい時用">resetを取り消したい（resetしたけど元の状態に戻したい時用)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: git add .
2: git commit -m &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>
3: git reset --hard HEAD &lt;span style="color:#75715e">## test commit を無かったことに。&lt;/span>
4: git reset --hard ORIG_HEAD &lt;span style="color:#75715e">## test commit を復活&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pushをした後に取り消す方法">pushをした後に取り消す方法&lt;/h3>
&lt;p>revertはresetと違ってコミットログに残る。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: git add .
2: git commit -m&lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxx&amp;#34;&lt;/span>
3: git log &lt;span style="color:#75715e">## 取り消し対象のコミットIDを取得&lt;/span>
4: git revert vsd122414dsfsfe &lt;span style="color:#75715e">## 取り消し対象のコミットIDを指定&lt;/span>
5: git push
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="コミット">コミット&lt;/h2>
&lt;h3 id="直前のコミットメッセージを修正">直前のコミットメッセージを修正&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git commit --amend -m&lt;span style="color:#e6db74">&amp;#34;ファイルを追加しました。&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="２つ以上前のコミットメッセージを修正">２つ以上前のコミットメッセージを修正&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">## 残念ながら git rebase -i を使うしかないです。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="直前のコミットに軽微なコミットを混ぜ込む方法">直前のコミットに軽微なコミットを混ぜ込む方法。&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: &lt;span style="color:#75715e">## 適当なファイルを修正&lt;/span>
2: git add .
3: git commit --amend　&lt;span style="color:#75715e">## 直前のコミットに１を混ぜ込む&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="コメント付きコミット一番標準的なもの">コメント付きコミット(一番標準的なもの)&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">1: &lt;span style="color:#75715e">## 適当なファイルを修正&lt;/span>
2: git add .
3: git commit -m&lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxx&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="cherrypick">CherryPick&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git cherry-pick 7c44840faab76c69c0b0a
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="外部gitブランチを自分のブランチ内に取り込むgit-submodule">外部Gitブランチを自分のブランチ内に取り込む(git submodule)&lt;/h2>
&lt;p>サブモジュールについては&lt;a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB">公式サイト&lt;/a>の説明を一読したほうがよいかもね。&lt;/p>
&lt;h3 id="submodule-取り込み">submodule 取り込み&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git submodule add サブモジュール化したいリポジトリ パス/名前指定
cd サブモジュール化したディレクトリ
git submodule update --init --recursive
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="submodule-を削除">submodule を削除&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cd サブモジュール化したいリポジトリのディレクトリ（トップレベル）
git submodule deinit -f 追加したサブモジュール
git rm -f 追加したサブモジュール
cd 自分のブランチのディレクトリ（トップレベル）
$ rm -rf .git/modules/追加したサブモジュール
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="削除">削除&lt;/h2>
&lt;h3 id="ローカルブランチの削除">ローカルブランチの削除&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git push -D branchname &lt;span style="color:#75715e">##-Dはpush残しがあっても削除する強力なやつ&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="リモートブランチの削除">リモートブランチの削除&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git push --delete origin feature/test
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GitHubでForkしてPR出すまで</title><link>https://fukugit.github.io/blog/posts/git/2019-12-05-pr%E5%87%BA%E3%81%97%E6%96%B9/</link><pubDate>Thu, 05 Dec 2019 13:21:50 +0900</pubDate><guid>https://fukugit.github.io/blog/posts/git/2019-12-05-pr%E5%87%BA%E3%81%97%E6%96%B9/</guid><description>
&lt;p>一度でいいからPRを出してみたい&lt;/p>
&lt;h2 id="参考にするサイト">参考にするサイト&lt;/h2>
&lt;p>いつか自分でまとめたい。&lt;br>
&lt;a href="http://kik.xii.jp/archives/179">http://kik.xii.jp/archives/179&lt;/a>&lt;/p>
&lt;h2 id="重要なこと">重要なこと&lt;/h2>
&lt;p>Fork元のリポジトリをaddして、自分のブランチへマージすること。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">git remote add upstream https&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#75715e">//github.com/XXXXX
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>